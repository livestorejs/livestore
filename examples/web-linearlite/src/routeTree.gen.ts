/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as StoreIdRouteImport } from './routes/$storeId'
import { Route as IndexRouteImport } from './routes/index'
import { Route as StoreIdIndexRouteImport } from './routes/$storeId/index'
import { Route as StoreIdSearchRouteImport } from './routes/$storeId/search'
import { Route as StoreIdIssueRouteImport } from './routes/$storeId/issue'
import { Route as StoreIdBoardRouteImport } from './routes/$storeId/board'

const StoreIdRoute = StoreIdRouteImport.update({
  id: '/$storeId',
  path: '/$storeId',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const StoreIdIndexRoute = StoreIdIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => StoreIdRoute,
} as any)
const StoreIdSearchRoute = StoreIdSearchRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => StoreIdRoute,
} as any)
const StoreIdIssueRoute = StoreIdIssueRouteImport.update({
  id: '/issue',
  path: '/issue',
  getParentRoute: () => StoreIdRoute,
} as any)
const StoreIdBoardRoute = StoreIdBoardRouteImport.update({
  id: '/board',
  path: '/board',
  getParentRoute: () => StoreIdRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$storeId': typeof StoreIdRouteWithChildren
  '/$storeId/board': typeof StoreIdBoardRoute
  '/$storeId/issue': typeof StoreIdIssueRoute
  '/$storeId/search': typeof StoreIdSearchRoute
  '/$storeId/': typeof StoreIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$storeId/board': typeof StoreIdBoardRoute
  '/$storeId/issue': typeof StoreIdIssueRoute
  '/$storeId/search': typeof StoreIdSearchRoute
  '/$storeId': typeof StoreIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$storeId': typeof StoreIdRouteWithChildren
  '/$storeId/board': typeof StoreIdBoardRoute
  '/$storeId/issue': typeof StoreIdIssueRoute
  '/$storeId/search': typeof StoreIdSearchRoute
  '/$storeId/': typeof StoreIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$storeId'
    | '/$storeId/board'
    | '/$storeId/issue'
    | '/$storeId/search'
    | '/$storeId/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$storeId/board'
    | '/$storeId/issue'
    | '/$storeId/search'
    | '/$storeId'
  id:
    | '__root__'
    | '/'
    | '/$storeId'
    | '/$storeId/board'
    | '/$storeId/issue'
    | '/$storeId/search'
    | '/$storeId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  StoreIdRoute: typeof StoreIdRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/$storeId': {
      id: '/$storeId'
      path: '/$storeId'
      fullPath: '/$storeId'
      preLoaderRoute: typeof StoreIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$storeId/': {
      id: '/$storeId/'
      path: '/'
      fullPath: '/$storeId/'
      preLoaderRoute: typeof StoreIdIndexRouteImport
      parentRoute: typeof StoreIdRoute
    }
    '/$storeId/search': {
      id: '/$storeId/search'
      path: '/search'
      fullPath: '/$storeId/search'
      preLoaderRoute: typeof StoreIdSearchRouteImport
      parentRoute: typeof StoreIdRoute
    }
    '/$storeId/issue': {
      id: '/$storeId/issue'
      path: '/issue'
      fullPath: '/$storeId/issue'
      preLoaderRoute: typeof StoreIdIssueRouteImport
      parentRoute: typeof StoreIdRoute
    }
    '/$storeId/board': {
      id: '/$storeId/board'
      path: '/board'
      fullPath: '/$storeId/board'
      preLoaderRoute: typeof StoreIdBoardRouteImport
      parentRoute: typeof StoreIdRoute
    }
  }
}

interface StoreIdRouteChildren {
  StoreIdBoardRoute: typeof StoreIdBoardRoute
  StoreIdIssueRoute: typeof StoreIdIssueRoute
  StoreIdSearchRoute: typeof StoreIdSearchRoute
  StoreIdIndexRoute: typeof StoreIdIndexRoute
}

const StoreIdRouteChildren: StoreIdRouteChildren = {
  StoreIdBoardRoute: StoreIdBoardRoute,
  StoreIdIssueRoute: StoreIdIssueRoute,
  StoreIdSearchRoute: StoreIdSearchRoute,
  StoreIdIndexRoute: StoreIdIndexRoute,
}

const StoreIdRouteWithChildren =
  StoreIdRoute._addFileChildren(StoreIdRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  StoreIdRoute: StoreIdRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.ts'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
