/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RecursiveRouteImport } from './routes/recursive'
import { Route as MultiInstanceRouteImport } from './routes/multi-instance'
import { Route as IndependentRouteImport } from './routes/independent'
import { Route as ChainedRouteImport } from './routes/chained'
import { Route as IndexRouteImport } from './routes/index'

const RecursiveRoute = RecursiveRouteImport.update({
  id: '/recursive',
  path: '/recursive',
  getParentRoute: () => rootRouteImport,
} as any)
const MultiInstanceRoute = MultiInstanceRouteImport.update({
  id: '/multi-instance',
  path: '/multi-instance',
  getParentRoute: () => rootRouteImport,
} as any)
const IndependentRoute = IndependentRouteImport.update({
  id: '/independent',
  path: '/independent',
  getParentRoute: () => rootRouteImport,
} as any)
const ChainedRoute = ChainedRouteImport.update({
  id: '/chained',
  path: '/chained',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/chained': typeof ChainedRoute
  '/independent': typeof IndependentRoute
  '/multi-instance': typeof MultiInstanceRoute
  '/recursive': typeof RecursiveRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/chained': typeof ChainedRoute
  '/independent': typeof IndependentRoute
  '/multi-instance': typeof MultiInstanceRoute
  '/recursive': typeof RecursiveRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/chained': typeof ChainedRoute
  '/independent': typeof IndependentRoute
  '/multi-instance': typeof MultiInstanceRoute
  '/recursive': typeof RecursiveRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/chained'
    | '/independent'
    | '/multi-instance'
    | '/recursive'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/chained' | '/independent' | '/multi-instance' | '/recursive'
  id:
    | '__root__'
    | '/'
    | '/chained'
    | '/independent'
    | '/multi-instance'
    | '/recursive'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ChainedRoute: typeof ChainedRoute
  IndependentRoute: typeof IndependentRoute
  MultiInstanceRoute: typeof MultiInstanceRoute
  RecursiveRoute: typeof RecursiveRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/recursive': {
      id: '/recursive'
      path: '/recursive'
      fullPath: '/recursive'
      preLoaderRoute: typeof RecursiveRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/multi-instance': {
      id: '/multi-instance'
      path: '/multi-instance'
      fullPath: '/multi-instance'
      preLoaderRoute: typeof MultiInstanceRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/independent': {
      id: '/independent'
      path: '/independent'
      fullPath: '/independent'
      preLoaderRoute: typeof IndependentRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/chained': {
      id: '/chained'
      path: '/chained'
      fullPath: '/chained'
      preLoaderRoute: typeof ChainedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ChainedRoute: ChainedRoute,
  IndependentRoute: IndependentRoute,
  MultiInstanceRoute: MultiInstanceRoute,
  RecursiveRoute: RecursiveRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.ts'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
