import { Schema } from '@livestore/utils/effect'
import { UnexpectedError } from '../errors.ts'
import { EventSequenceNumber } from '../schema/mod.ts'

export class IsOfflineError extends Schema.TaggedError<IsOfflineError>()('IsOfflineError', {
  cause: Schema.Defect,
}) {}

/** Unique ID generated by the backend when its created. Used to check whether the backend identity has changed. */
export const BackendId = Schema.String.annotations({ title: '@livestore/sync-cf:BackendId' })

export class BackendIdMismatchError extends Schema.TaggedError<BackendIdMismatchError>()('BackendIdMismatchError', {
  expected: BackendId,
  received: BackendId,
}) {}

export class ServerAheadError extends Schema.TaggedError<ServerAheadError>()('ServerAheadError', {
  minimumExpectedNum: EventSequenceNumber.GlobalEventSequenceNumber,
  providedNum: EventSequenceNumber.GlobalEventSequenceNumber,
}) {}

export class InvalidPushError extends Schema.TaggedError<InvalidPushError>()('InvalidPushError', {
  cause: Schema.Union(UnexpectedError, ServerAheadError, BackendIdMismatchError),
}) {}

export class InvalidPullError extends Schema.TaggedError<InvalidPullError>()('InvalidPullError', {
  cause: Schema.Defect,
}) {}

export class LeaderAheadError extends Schema.TaggedError<LeaderAheadError>()('LeaderAheadError', {
  minimumExpectedNum: EventSequenceNumber.EventSequenceNumber,
  providedNum: EventSequenceNumber.EventSequenceNumber,
  /** Generation number the client session should use for subsequent pushes */
  // nextGeneration: Schema.Number,
}) {}

export const SyncError = Schema.Union(InvalidPushError, InvalidPullError)
export type SyncError = typeof SyncError.Type
