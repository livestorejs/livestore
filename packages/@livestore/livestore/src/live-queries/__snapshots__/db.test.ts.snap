// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`otel > otel 3`] = `
{
  "_name": "test",
  "children": [
    {
      "_name": "livestore.in-memory-db:execute",
      "attributes": {
        "sql.query": "
      PRAGMA page_size=32768;
      PRAGMA cache_size=10000;
      PRAGMA journal_mode='MEMORY'; -- we don't flush to disk before committing a write
      PRAGMA synchronous='OFF';
      PRAGMA temp_store='MEMORY';
      PRAGMA foreign_keys='ON'; -- we want foreign key constraints to be enforced
    ",
      },
    },
    {
      "_name": "LiveStore:mutations",
      "children": [
        {
          "_name": "LiveStore:mutate",
          "attributes": {
            "livestore.mutateLabel": "mutate",
          },
          "children": [
            {
              "_name": "LiveStore:processWrites",
              "attributes": {
                "livestore.mutateLabel": "mutate",
              },
              "children": [
                {
                  "_name": "LiveStore:mutateWithoutRefresh",
                  "attributes": {
                    "livestore.args": "{
  "sql": "INSERT INTO todos (id, text, completed) VALUES ('t1', 'buy milk', 0)"
}",
                    "livestore.mutation": "livestore.RawSql",
                  },
                  "children": [
                    {
                      "_name": "livestore.in-memory-db:execute",
                      "attributes": {
                        "sql.query": "INSERT INTO todos (id, text, completed) VALUES ('t1', 'buy milk', 0)",
                      },
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
    },
    {
      "_name": "LiveStore:queries",
      "children": [
        {
          "_name": "db:select * from todos",
          "attributes": {
            "sql.query": "select * from todos",
            "sql.rowsCount": 0,
          },
          "children": [
            {
              "_name": "sql-in-memory-select",
              "attributes": {
                "sql.cached": false,
                "sql.query": "select * from todos",
                "sql.rowsCount": 0,
              },
            },
          ],
        },
        {
          "_name": "db:select * from todos",
          "attributes": {
            "sql.query": "select * from todos",
            "sql.rowsCount": 1,
          },
          "children": [
            {
              "_name": "sql-in-memory-select",
              "attributes": {
                "sql.cached": false,
                "sql.query": "select * from todos",
                "sql.rowsCount": 1,
              },
            },
          ],
        },
      ],
    },
  ],
}
`;

exports[`otel > with thunks 3`] = `
{
  "_name": "test",
  "children": [
    {
      "_name": "livestore.in-memory-db:execute",
      "attributes": {
        "sql.query": "
      PRAGMA page_size=32768;
      PRAGMA cache_size=10000;
      PRAGMA journal_mode='MEMORY'; -- we don't flush to disk before committing a write
      PRAGMA synchronous='OFF';
      PRAGMA temp_store='MEMORY';
      PRAGMA foreign_keys='ON'; -- we want foreign key constraints to be enforced
    ",
      },
    },
    {
      "_name": "LiveStore:mutations",
      "children": [
        {
          "_name": "LiveStore:mutate",
          "attributes": {
            "livestore.mutateLabel": "mutate",
          },
          "children": [
            {
              "_name": "LiveStore:processWrites",
              "attributes": {
                "livestore.mutateLabel": "mutate",
              },
              "children": [
                {
                  "_name": "LiveStore:mutateWithoutRefresh",
                  "attributes": {
                    "livestore.args": "{
  "sql": "INSERT INTO todos (id, text, completed) VALUES ('t1', 'buy milk', 0)"
}",
                    "livestore.mutation": "livestore.RawSql",
                  },
                  "children": [
                    {
                      "_name": "livestore.in-memory-db:execute",
                      "attributes": {
                        "sql.query": "INSERT INTO todos (id, text, completed) VALUES ('t1', 'buy milk', 0)",
                      },
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
    },
    {
      "_name": "LiveStore:queries",
      "children": [
        {
          "_name": "db:select * from todos where completed = 0",
          "attributes": {
            "sql.query": "select * from todos where completed = 0",
            "sql.rowsCount": 0,
          },
          "children": [
            {
              "_name": "js:where-filter",
            },
            {
              "_name": "sql-in-memory-select",
              "attributes": {
                "sql.cached": false,
                "sql.query": "select * from todos where completed = 0",
                "sql.rowsCount": 0,
              },
            },
          ],
        },
        {
          "_name": "db:select * from todos where completed = 0",
          "attributes": {
            "sql.query": "select * from todos where completed = 0",
            "sql.rowsCount": 1,
          },
          "children": [
            {
              "_name": "sql-in-memory-select",
              "attributes": {
                "sql.cached": false,
                "sql.query": "select * from todos where completed = 0",
                "sql.rowsCount": 1,
              },
            },
          ],
        },
      ],
    },
  ],
}
`;

exports[`otel > with thunks with query builder and without labels 3`] = `
{
  "_name": "test",
  "children": [
    {
      "_name": "livestore.in-memory-db:execute",
      "attributes": {
        "sql.query": "
      PRAGMA page_size=32768;
      PRAGMA cache_size=10000;
      PRAGMA journal_mode='MEMORY'; -- we don't flush to disk before committing a write
      PRAGMA synchronous='OFF';
      PRAGMA temp_store='MEMORY';
      PRAGMA foreign_keys='ON'; -- we want foreign key constraints to be enforced
    ",
      },
    },
    {
      "_name": "LiveStore:mutations",
      "children": [
        {
          "_name": "LiveStore:mutate",
          "attributes": {
            "livestore.mutateLabel": "mutate",
          },
          "children": [
            {
              "_name": "LiveStore:processWrites",
              "attributes": {
                "livestore.mutateLabel": "mutate",
              },
              "children": [
                {
                  "_name": "LiveStore:mutateWithoutRefresh",
                  "attributes": {
                    "livestore.args": "{
  "sql": "INSERT INTO todos (id, text, completed) VALUES ('t1', 'buy milk', 0)"
}",
                    "livestore.mutation": "livestore.RawSql",
                  },
                  "children": [
                    {
                      "_name": "livestore.in-memory-db:execute",
                      "attributes": {
                        "sql.query": "INSERT INTO todos (id, text, completed) VALUES ('t1', 'buy milk', 0)",
                      },
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
    },
    {
      "_name": "LiveStore:queries",
      "children": [
        {
          "_name": "db:SELECT * FROM 'todos' WHERE completed = ? LIMIT ?",
          "attributes": {
            "sql.query": "SELECT * FROM 'todos' WHERE completed = ? LIMIT ?",
            "sql.rowsCount": 0,
          },
          "children": [
            {
              "_name": "js:() => ({ completed: false })",
            },
            {
              "_name": "sql-in-memory-select",
              "attributes": {
                "sql.cached": false,
                "sql.query": "SELECT * FROM 'todos' WHERE completed = ? LIMIT ?",
                "sql.rowsCount": 0,
              },
            },
          ],
        },
        {
          "_name": "db:SELECT * FROM 'todos' WHERE completed = ? LIMIT ?",
          "attributes": {
            "sql.query": "SELECT * FROM 'todos' WHERE completed = ? LIMIT ?",
            "sql.rowsCount": 1,
          },
          "children": [
            {
              "_name": "sql-in-memory-select",
              "attributes": {
                "sql.cached": false,
                "sql.query": "SELECT * FROM 'todos' WHERE completed = ? LIMIT ?",
                "sql.rowsCount": 1,
              },
            },
          ],
        },
      ],
    },
  ],
}
`;
