name: ci

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['**']

jobs:
  lint:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: DeterminateSystems/nix-installer-action@main
      - uses: DeterminateSystems/magic-nix-cache-action@main
      - name: Build nix env
        run: nix develop --command true
      - uses: HatsuneMiku3939/direnv-action
      - run: direnv allow
      - run: nix develop --command pnpm install
      - run: nix develop --command pnpm lint:check

  test:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: DeterminateSystems/nix-installer-action@main
      - uses: DeterminateSystems/magic-nix-cache-action@main
      - name: Build nix env
        run: nix develop --command true
      - uses: HatsuneMiku3939/direnv-action
      - run: direnv allow
      - run: nix develop --command pnpm install
      - run: nix develop --command pnpm build:ts
      - run: nix develop --command pnpm test
      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report
          path: integration-tests/playwright-report/
          retention-days: 30
      - name: "Upload trace"
        if: ${{ !cancelled() }}
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          # TODO surface deploy url in github UI via environments
        run: |
          nix develop --command pnpm netlify deploy --dir=integration-tests/playwright-report --site livestore-ci --filter @local/integration-tests

  publish-snapshot-version:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    needs: [test]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: DeterminateSystems/nix-installer-action@main
      - uses: DeterminateSystems/magic-nix-cache-action@main
      - name: Build nix env
        run: nix develop --command true
      - uses: HatsuneMiku3939/direnv-action
      - run: direnv allow
      - run: nix develop --command pnpm install
      - run: nix develop --command pnpm build:ts
      - name: Configure NPM authentication
        run: |
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" >> ~/.npmrc
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      - run: nix develop --command pnpm --filter '@livestore/*' exec -- pnpm version '0.0.0-snapshot-${{ github.sha }}' --no-git-tag-version
      - run: nix develop --command pnpm --filter '@livestore/*' exec -- pnpm publish --tag=snapshot --no-git-checks

  generate-examples-dist:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: DeterminateSystems/nix-installer-action@main
      - uses: DeterminateSystems/magic-nix-cache-action@main
      - name: Build nix env
        run: nix develop --command true
      - uses: HatsuneMiku3939/direnv-action
      - run: direnv allow
      - run: nix develop --command pnpm install
      - run: nix develop --command pnpm generate:examples:dist

  build-and-deploy-examples-src:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: DeterminateSystems/nix-installer-action@main
      - uses: DeterminateSystems/magic-nix-cache-action@main
      - name: Build nix env
        run: nix develop --command true
      - uses: HatsuneMiku3939/direnv-action
      - run: direnv allow
      - run: nix develop --command pnpm install
      - run: nix develop --command pnpm build:ts
      - run: nix develop --command pnpm build:examples:src
      - run: |
          nix develop --command pnpm deploy:examples:src \
            --prod=${{ github.ref == 'refs/heads/main' && 1 || 0 }} \
            --alias=snapshot-${{ github.sha }}
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

  build-example-tiged-todomvc:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    needs: [publish-snapshot-version]
    steps:
      - uses: oven-sh/setup-bun@v2
      # TODO bring back once repo is public
      # - run: bunx tiged --mode=git https://github.com/livestorejs/livestore/examples/todomvc#${{ github.sha }} example
      - uses: actions/checkout@v4
        with:
          path: example-repo
      - run: cp -r example-repo/examples/dist/todomvc example
      - name: Add snapshot resolution to package.json
        run: |
          for pkg in livestore web react common utils db-schema; do
            jq --arg pkg "$pkg" --arg sha "${{ github.sha }}" '.resolutions["@livestore/" + $pkg] = "0.0.0-snapshot-" + $sha' package.json > package.json.tmp && mv package.json.tmp package.json
          done
        working-directory: example
      - uses: nick-fields/retry@v3
        with:
          retry_wait_seconds: 10
          timeout_minutes: 5
          max_attempts: 2
          command: cd example && bun install
      - run: bun run build
        working-directory: example

  build-example-tiged-linearlite:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    needs: [publish-snapshot-version]
    steps:
      - uses: oven-sh/setup-bun@v2
      # TODO bring back once repo is public
      # - run: bunx tiged --mode=git https://github.com/livestorejs/livestore/examples/linearlite#${{ github.sha }} example
      - uses: actions/checkout@v4
        with:
          path: example-repo
      - run: cp -r example-repo/examples/dist/linearlite example
      - name: Add snapshot resolution to package.json
        run: |
          for pkg in livestore web react common utils db-schema; do
            jq --arg pkg "$pkg" --arg sha "${{ github.sha }}" '.resolutions["@livestore/" + $pkg] = "0.0.0-snapshot-" + $sha' package.json > package.json.tmp && mv package.json.tmp package.json
          done
        working-directory: example
      - uses: nick-fields/retry@v3
        with:
          retry_wait_seconds: 10
          timeout_minutes: 5
          max_attempts: 2
          command: cd example && bun install
      - run: bun run build
        working-directory: example

  build-example-tiged-expo-app:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    needs: [publish-snapshot-version]
    steps:
      - uses: oven-sh/setup-bun@v2
      # TODO bring back once repo is public
      # - run: bunx tiged --mode=git https://github.com/livestorejs/livestore/examples/expo-app#${{ github.sha }} example
      - uses: actions/checkout@v4
        with:
          path: example-repo
      - run: cp -r example-repo/examples/dist/expo-app example
      - name: Add snapshot resolution to package.json
        run: |
          for pkg in livestore expo react common utils db-schema; do
            jq --arg pkg "$pkg" --arg sha "${{ github.sha }}" '.resolutions["@livestore/" + $pkg] = "0.0.0-snapshot-" + $sha' package.json > package.json.tmp && mv package.json.tmp package.json
          done
        working-directory: example
      - uses: nick-fields/retry@v3
        with:
          retry_wait_seconds: 10
          timeout_minutes: 5
          max_attempts: 2
          command: cd example && bun install
      # TODO EAS build
      # - run: bun run build
      #   working-directory: example

  build-deploy-website:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: DeterminateSystems/nix-installer-action@main
      - uses: DeterminateSystems/magic-nix-cache-action@main
      - name: Build nix env
        run: nix develop --command true
      - uses: HatsuneMiku3939/direnv-action
      - run: direnv allow
      - run: nix develop --command pnpm install
      - run: nix develop --command pnpm build
        working-directory: website
      - run: nix develop --command bunx netlify deploy --dir=website/dist --site=livestore-website ${{ github.ref == 'refs/heads/main' && '--prod' || '' }} --filter=website
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}