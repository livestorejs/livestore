name: ci

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['**']

jobs:
  lint:
    strategy:
      matrix:
        node-version: [22]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Install pnpm
        uses: pnpm/action-setup@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: pnpm
      - run: pnpm install
      - run: pnpm lint:check

  test:
    strategy:
      matrix:
        node-version: [22]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@main
      - uses: DeterminateSystems/magic-nix-cache-action@main
      - name: Build nix env
        run: nix develop --command true
      - name: Install pnpm
        run: nix develop --command pnpm install
      - name: Derive monorepo examples
        run: nix develop --command pnpm setup:monorepo-examples --single-run
        env:
          WORKSPACE_ROOT: ${{ github.workspace }}
      - run: nix develop --command pnpm install
      - run: nix develop --command pnpm build:ts
      - run: nix develop --command pnpm test
      # TODO re-enable when playwright bug is fixed
      # - uses: actions/upload-artifact@v4
      #   if: ${{ !cancelled() }}
      #   with:
      #     name: playwright-report
      #     path: integration-tests/playwright-report/
      #     retention-days: 30
      # - name: "Upload trace"
      #   if: ${{ !cancelled() }}
      #   env:
      #     NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
      #     # TODO surface deploy url in github UI via environments
      #   run: |
      #     nix develop --command pnpm netlify deploy --dir=integration-tests/playwright-report --site livestore-ci --filter @local/integration-tests

  publish-snapshot-version:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    needs: [test]
    steps:
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@main
      - uses: DeterminateSystems/magic-nix-cache-action@main
      - name: Build nix env
        run: nix develop --command true
      - name: Install pnpm
        run: nix develop --command pnpm install
      - name: Derive monorepo examples
        run: nix develop --command pnpm setup:monorepo-examples --single-run
        env:
          WORKSPACE_ROOT: ${{ github.workspace }}
      - run: nix develop --command pnpm install
      - run: nix develop --command pnpm build:ts
      - name: Configure NPM authentication
        run: |
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" >> ~/.npmrc
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      - run: nix develop --command pnpm --filter '@livestore/*' exec -- pnpm version '0.0.0-snapshot-${{ github.sha }}' --no-git-tag-version
      - run: nix develop --command pnpm --filter '@livestore/*' exec -- pnpm publish --tag=snapshot --no-git-checks

  # TODO test cloning examples standalone 

  build-monorepo-examples:
    strategy:
      matrix:
        node-version: [22]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@main
      - uses: DeterminateSystems/magic-nix-cache-action@main
      - name: Build nix env
        run: nix develop --command true
      - name: Derive monorepo examples
        run: nix develop --command pnpm setup:monorepo-examples --single-run
        env:
          WORKSPACE_ROOT: ${{ github.workspace }}
      - run: nix develop --command pnpm install
      - run: nix develop --command pnpm build:ts
      - run: nix develop --command pnpm build:monorepo-examples

  build-example-tiged-todomvc:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    needs: [publish-snapshot-version]
    steps:
      # TODO remove once repo is public
      - name: Configure git credentials
        run: 'git config --global http.extraheader "Authorization: Bearer ${{ github.token }}"'
      - uses: oven-sh/setup-bun@v2
      - run: bunx tiged --mode=git https://github.com/livestorejs/livestore/examples/todomvc#${{ github.sha }} example
      - run: bun install
        working-directory: example
      - run: bun build
        working-directory: example

  build-example-tiged-linearlite:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    needs: [publish-snapshot-version]
    steps:
      - name: Configure git credentials
        run: 'git config --global http.extraheader "Authorization: Bearer ${{ github.token }}"'
      - uses: oven-sh/setup-bun@v2
      - run: bunx tiged --mode=git https://github.com/livestorejs/livestore/examples/linearlite#${{ github.sha }} example
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Add snapshot resolution to package.json
        run: |
          for pkg in livestore web react common utils db-schema; do
            jq --arg pkg "$pkg" --arg sha "${{ github.sha }}" '.resolutions["@livestore/" + $pkg] = "0.0.0-snapshot-" + $sha' example/package.json > example/package.json.tmp && mv example/package.json.tmp example/package.json
          done
      - run: bun install
        working-directory: example
      - run: bun build
        working-directory: example

  build-example-tiged-expo-app:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    needs: [publish-snapshot-version]
    steps:
      - name: Configure git credentials
        run: 'git config --global http.extraheader "Authorization: Bearer ${{ github.token }}"'
      - uses: oven-sh/setup-bun@v2
      - run: bunx tiged --mode=git https://github.com/livestorejs/livestore/examples/expo-app#${{ github.sha }} example
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Add snapshot resolution to package.json
        run: |
          for pkg in livestore expo react common utils db-schema; do
            jq --arg pkg "$pkg" --arg sha "${{ github.sha }}" '.resolutions["@livestore/" + $pkg] = "0.0.0-snapshot-" + $sha' example/package.json > example/package.json.tmp && mv example/package.json.tmp example/package.json
          done
        working-directory: example
      - run: bun install
        working-directory: example
      # TODO EAS build
      # - run: bun build
      #   working-directory: example

  build-website:
    strategy:
      matrix:
        node-version: [22]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Install pnpm
        uses: pnpm/action-setup@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: pnpm
      - run: pnpm install
      - run: pnpm build
        working-directory: website