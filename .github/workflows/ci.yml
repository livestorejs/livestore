name: ci

permissions:
  id-token: write
  contents: read

on:
  push:
    branches: 
      - main  # Only run on pushes to main
  pull_request:
    branches: ['**']  # Run on PRs targeting any branch

jobs:
  lint:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@main
        with:
          determinate: true
      - uses: DeterminateSystems/flakehub-cache-action@main
      - uses: HatsuneMiku3939/direnv-action@v1
        timeout-minutes: 5
      - run: pnpm install
      - run: pnpm lint:check
      - run: pnpm circular

  test:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@main
        with:
          determinate: true
      - uses: DeterminateSystems/flakehub-cache-action@main
      - uses: HatsuneMiku3939/direnv-action@v1
        timeout-minutes: 5
      - run: pnpm install
      - run: pnpm build:ts
      # Seems like webmesh / utils is flaky on CI when running in parallel with the other packages, so we run it separately
      - run: pnpm --filter '!@livestore/webmesh' --filter '!@livestore/utils' --parallel run test
      - run: pnpm --filter '@livestore/webmesh' run test
      - run: pnpm --filter '@livestore/utils' run test
      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report
          path: tests/integration/playwright-report/
          retention-days: 30
      - name: "Upload trace"
        if: ${{ !cancelled() }}
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          # TODO surface deploy url in github UI via environments
        run: |
          bunx netlify-cli deploy --dir=tests/integration/playwright-report --site livestore-ci --filter @local/tests-integration

  publish-snapshot-version:
    if: github.event.pull_request.head.repo.fork != true
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    needs: [test]
    steps:
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@main
        with:
          determinate: true
      - uses: DeterminateSystems/flakehub-cache-action@main
      - uses: HatsuneMiku3939/direnv-action@v1
        timeout-minutes: 5
      - run: pnpm install
      - run: pnpm build:ts
      - name: Configure NPM authentication
        run: |
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" >> ~/.npmrc
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      - run: pnpm --filter '@livestore/*' exec -- pnpm version '0.0.0-snapshot-${{ github.sha }}' --no-git-tag-version
      - run: pnpm --filter '@livestore/*' exec -- pnpm publish --tag=snapshot --no-git-checks

  generate-examples-standalone:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@main
        with:
          determinate: true
      - uses: DeterminateSystems/flakehub-cache-action@main
      - uses: HatsuneMiku3939/direnv-action@v1
        timeout-minutes: 5
      - run: pnpm install
      - run: pnpm build:ts
      - run: pnpm generate:examples:standalone

  build-and-deploy-examples-src:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@main
        with:
          determinate: true
      - uses: DeterminateSystems/flakehub-cache-action@main
      - uses: HatsuneMiku3939/direnv-action@v1
        timeout-minutes: 5
      - run: pnpm install
      - run: pnpm build:ts
      - run: pnpm build:examples:src
        env:
          VITE_LIVESTORE_SYNC_URL: 'https://websocket-server.schickling.workers.dev'
      - run: |
          pnpm deploy:examples:src \
            --prod=${{ github.ref == 'refs/heads/main' && 1 || 0 }} \
            --alias=snapshot-$(git rev-parse --short HEAD)
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

  build-deploy-website:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@main
        with:
          determinate: true
      - uses: DeterminateSystems/flakehub-cache-action@main
      - uses: HatsuneMiku3939/direnv-action@v1
        timeout-minutes: 5
      - run: pnpm install
      - run: pnpm build:ts # Needed for starlight-typedoc
      - run: STARLIGHT_INCLUDE_API_DOCS=1 pnpm build
        working-directory: website
      - run: |
          # Get branch name and sanitize it for Netlify
          if [[ "$BRANCH_NAME" == "main" ]]; then
            SITE="livestore-website"
          else
            SITE="livestore-website-next"
          fi

          # TODO update to `dev` for next release branch
          if [[ "$BRANCH_NAME" == "main" || "$BRANCH_NAME" == "wip/0.3.0" ]]; then
            DEPLOY_FLAG="--prod"
          else
            BRANCH_ALIAS=$(echo ${BRANCH_NAME} | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]')
            DEPLOY_FLAG="--alias=$BRANCH_ALIAS"
          fi

          echo "BRANCH_NAME: $BRANCH_NAME"
          echo "SITE: $SITE"
          echo "DEPLOY_FLAG: $DEPLOY_FLAG"
          
          # First deploy - gets a unique deploy URL
          bunx netlify-cli deploy \
            --dir=website/dist \
            --site=$SITE \
            --filter=website

          # Second deploy - with branch alias or prod flag
          bunx netlify-cli deploy \
            $DEPLOY_FLAG \
            --dir=website/dist \
            --site=$SITE \
            --filter=website
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          BRANCH_NAME: ${{ github.head_ref || github.ref_name }} 

  # NOTE for the example jobs below we're not using the Nix setup but instead are just using bun directly
  # to simulate a simple user-facing setup

  build-example-tiged-todomvc:
    if: github.event.pull_request.head.repo.fork != true
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    needs: [publish-snapshot-version]
    steps:
      - uses: oven-sh/setup-bun@v2
      # TODO bring back once repo is public
      # - run: bunx tiged --mode=git https://github.com/livestorejs/livestore/examples/todomvc#${{ github.sha }} example
      - uses: actions/checkout@v4
        with:
          path: example-repo
      - run: cp -r example-repo/examples/standalone/todomvc example
      - name: Add snapshot resolution to package.json
        run: |
          for pkg in livestore adapter-web peer-deps react common utils; do
            jq --arg pkg "$pkg" --arg sha "${{ github.sha }}" '.resolutions["@livestore/" + $pkg] = "0.0.0-snapshot-" + $sha' package.json > package.json.tmp && mv package.json.tmp package.json
          done
        working-directory: example
      - uses: nick-fields/retry@v3
        with:
          retry_wait_seconds: 10
          timeout_minutes: 5
          max_attempts: 2
          command: cd example && bun install
      - run: bun run build
        working-directory: example

  build-example-tiged-linearlite:
    if: github.event.pull_request.head.repo.fork != true
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    needs: [publish-snapshot-version]
    steps:
      - uses: oven-sh/setup-bun@v2
      # TODO bring back once repo is public
      # - run: bunx tiged --mode=git https://github.com/livestorejs/livestore/examples/linearlite#${{ github.sha }} example
      - uses: actions/checkout@v4
        with:
          path: example-repo
      - run: cp -r example-repo/examples/standalone/linearlite example
      - name: Add snapshot resolution to package.json
        run: |
          for pkg in livestore adapter-web peer-deps react common utils; do
            jq --arg pkg "$pkg" --arg sha "${{ github.sha }}" '.resolutions["@livestore/" + $pkg] = "0.0.0-snapshot-" + $sha' package.json > package.json.tmp && mv package.json.tmp package.json
          done
        working-directory: example
      - uses: nick-fields/retry@v3
        with:
          retry_wait_seconds: 10
          timeout_minutes: 5
          max_attempts: 2
          command: cd example && bun install
      - run: bun run build
        working-directory: example

  build-example-tiged-expo-linearlite:
    if: github.event.pull_request.head.repo.fork != true
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    needs: [publish-snapshot-version]
    steps:
      - uses: oven-sh/setup-bun@v2
      # TODO bring back once repo is public
      # - run: bunx tiged --mode=git https://github.com/livestorejs/livestore/examples/expo-linearlite#${{ github.sha }} example
      - uses: actions/checkout@v4
        with:
          path: example-repo
      - run: cp -r example-repo/examples/standalone/expo-linearlite example
      - name: Add snapshot resolution to package.json
        run: |
          for pkg in livestore adapter-web peer-deps react common utils; do
            jq --arg pkg "$pkg" --arg sha "${{ github.sha }}" '.resolutions["@livestore/" + $pkg] = "0.0.0-snapshot-" + $sha' package.json > package.json.tmp && mv package.json.tmp package.json
          done
        working-directory: example
      - uses: nick-fields/retry@v3
        with:
          retry_wait_seconds: 10
          timeout_minutes: 5
          max_attempts: 2
          command: cd example && bun install
      # TODO EAS build
      # - run: bun run build
      #   working-directory: example
