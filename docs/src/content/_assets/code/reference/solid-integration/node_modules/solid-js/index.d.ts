export type Accessor<T> = () => T
export type Setter<T> = (value: T) => T
export type Component<P = {}> = (props: P) => any

export interface ForProps<T, U> {
  each: readonly T[]
  children?: (item: T, index: () => number) => U
  fallback?: U
}

export declare function For<T, U>(props: ForProps<T, U>): any

export declare function createSignal<T>(value: T): [Accessor<T>, Setter<T>]
export declare function onCleanup(fn: () => void): void

type EventHandler<T, E extends Event> = (event: E & { currentTarget: T; target: T }) => void

interface HTMLAttributes<T> {
  class?: string
  classList?: Record<string, boolean | undefined>
  onClick?: EventHandler<T, MouseEvent>
  onChange?: EventHandler<T, Event>
}

interface InputHTMLAttributes<T> extends HTMLAttributes<T> {
  type?: string
  value?: string | number | readonly string[]
  checked?: boolean
}

interface ButtonHTMLAttributes<T> extends HTMLAttributes<T> {
  type?: 'button' | 'submit' | 'reset'
}

declare global {
  namespace JSX {
    interface IntrinsicElements {
      section: HTMLAttributes<HTMLElement>
      ul: HTMLAttributes<HTMLUListElement>
      li: HTMLAttributes<HTMLLIElement>
      div: HTMLAttributes<HTMLDivElement>
      input: InputHTMLAttributes<HTMLInputElement>
      label: HTMLAttributes<HTMLLabelElement>
      button: ButtonHTMLAttributes<HTMLButtonElement>
    }
  }
}
